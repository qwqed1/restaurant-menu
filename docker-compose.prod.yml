version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: halal_hall_db
    restart: always
    env_file:
      - .env.production
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init-database.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - halal_hall_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: halal_hall_backend
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env.production
    environment:
      DB_HOST: postgres
      SERVER_HOST: 0.0.0.0
    volumes:
      - uploads_data:/app/uploads
    networks:
      - halal_hall_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: halal_hall_nginx
    restart: always
    depends_on:
      - backend
      - frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - halal_hall_network

  # Frontend Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        VITE_API_URL: /api
        VITE_USE_API: "true"
    container_name: halal_hall_frontend
    restart: always
    depends_on:
      - backend
    networks:
      - halal_hall_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  uploads_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  halal_hall_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
