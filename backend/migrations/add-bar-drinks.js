import pool from '../config/database.js';

async function addBarDrinks() {
  try {
    console.log('üçπ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –Ω–∞–ø–∏—Ç–∫–æ–≤ –¥–ª—è –±–∞—Ä–∞...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–ë–∞—Ä"
    const barCheck = await pool.query(
      "SELECT id FROM categories WHERE id = 13"
    );

    if (barCheck.rows.length === 0) {
      console.log('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–ë–∞—Ä" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: npm run add-bar-pizza');
      process.exit(1);
    }

    // –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π display_order
    const maxOrderResult = await pool.query(
      'SELECT MAX(display_order) as max_order FROM categories'
    );
    let nextOrder = (maxOrderResult.rows[0].max_order || 0) + 1;

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –±–∞—Ä–∞
    console.log('\nüìã –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
    
    // 1. –ü—Ä–æ—Ö–ª–∞–¥–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏
    const coolDrinksResult = await pool.query(
      `INSERT INTO categories (name_ru, name_en, name_kk, display_order) 
       VALUES ($1, $2, $3, $4) 
       RETURNING id`,
      ['–ü—Ä–æ—Ö–ª–∞–¥–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏', 'Soft Drinks', '–°–∞–ª“õ—ã–Ω —Å—É—Å—ã–Ω–¥–∞—Ä', nextOrder++]
    );
    const coolDrinksId = coolDrinksResult.rows[0].id;
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–ü—Ä–æ—Ö–ª–∞–¥–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏" (ID: ${coolDrinksId})`);

    // 2. –õ–∏–º–æ–Ω–∞–¥—ã
    const lemonadesResult = await pool.query(
      `INSERT INTO categories (name_ru, name_en, name_kk, display_order) 
       VALUES ($1, $2, $3, $4) 
       RETURNING id`,
      ['–õ–∏–º–æ–Ω–∞–¥—ã', 'Lemonades', '–õ–∏–º–æ–Ω–∞–¥—Ç–∞—Ä', nextOrder++]
    );
    const lemonadesId = lemonadesResult.rows[0].id;
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–õ–∏–º–æ–Ω–∞–¥—ã" (ID: ${lemonadesId})`);

    // 3. –ß–∞–∏
    const teasResult = await pool.query(
      `INSERT INTO categories (name_ru, name_en, name_kk, display_order) 
       VALUES ($1, $2, $3, $4) 
       RETURNING id`,
      ['–ß–∞–∏', 'Teas', '–®–∞–π–ª–∞—Ä', nextOrder++]
    );
    const teasId = teasResult.rows[0].id;
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–ß–∞–∏" (ID: ${teasId})`);

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–∏—Ç–∫–∏
    console.log('\nü•§ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–æ–≤...');

    // –ü—Ä–æ—Ö–ª–∞–¥–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏
    const coolDrinks = [
      { name: '–ö–æ–∫–∞-–ö–æ–ª–∞', name_en: 'Coca-Cola', name_kk: '–ö–æ–∫–∞-–ö–æ–ª–∞', price: 500, weight: '330 –º–ª' },
      { name: '–°–ø—Ä–∞–π—Ç', name_en: 'Sprite', name_kk: '–°–ø—Ä–∞–π—Ç', price: 500, weight: '330 –º–ª' },
      { name: '–§–∞–Ω—Ç–∞', name_en: 'Fanta', name_kk: '–§–∞–Ω—Ç–∞', price: 500, weight: '330 –º–ª' },
      { name: '–ú–∏–Ω–µ—Ä–∞–ª—å–Ω–∞—è –≤–æ–¥–∞', name_en: 'Mineral Water', name_kk: '–ú–∏–Ω–µ—Ä–∞–ª–¥—ã —Å—É', price: 300, weight: '500 –º–ª' },
      { name: '–°–æ–∫ –∞–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–π', name_en: 'Orange Juice', name_kk: '–ê–ø–µ–ª—å—Å–∏–Ω —à—ã—Ä—ã–Ω—ã', price: 600, weight: '250 –º–ª' },
      { name: '–°–æ–∫ —è–±–ª–æ—á–Ω—ã–π', name_en: 'Apple Juice', name_kk: '–ê–ª–º–∞ —à—ã—Ä—ã–Ω—ã', price: 600, weight: '250 –º–ª' },
    ];

    for (const drink of coolDrinks) {
      await pool.query(
        `INSERT INTO dishes (category_id, name, description_ru, description_en, description_kk, price, weight, is_available) 
         VALUES ($1, $2, $3, $4, $5, $6, $7, $8)`,
        [
          coolDrinksId,
          drink.name,
          `–û—Å–≤–µ–∂–∞—é—â–∏–π –Ω–∞–ø–∏—Ç–æ–∫ ${drink.name}`,
          `Refreshing ${drink.name_en}`,
          `–°–µ—Ä–≥—ñ—Ç–µ—Ç—ñ–Ω ${drink.name_kk}`,
          drink.price,
          drink.weight,
          true
        ]
      );
    }
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${coolDrinks.length} –ø—Ä–æ—Ö–ª–∞–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤`);

    // –õ–∏–º–æ–Ω–∞–¥—ã
    const lemonades = [
      { name: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ª–∏–º–æ–Ω–∞–¥', name_en: 'Classic Lemonade', name_kk: '–ö–ª–∞—Å—Å–∏–∫–∞–ª—ã“õ –ª–∏–º–æ–Ω–∞–¥', price: 800, weight: '400 –º–ª' },
      { name: '–ö–ª—É–±–Ω–∏—á–Ω—ã–π –ª–∏–º–æ–Ω–∞–¥', name_en: 'Strawberry Lemonade', name_kk: '“ö“±–ª–ø—ã–Ω–∞–π–ª—ã –ª–∏–º–æ–Ω–∞–¥', price: 900, weight: '400 –º–ª' },
      { name: '–ú—è—Ç–Ω—ã–π –ª–∏–º–æ–Ω–∞–¥', name_en: 'Mint Lemonade', name_kk: '–ñ–∞–ª–±—ã–∑–¥—ã –ª–∏–º–æ–Ω–∞–¥', price: 850, weight: '400 –º–ª' },
      { name: '–ú–∞–Ω–≥–æ –ª–∏–º–æ–Ω–∞–¥', name_en: 'Mango Lemonade', name_kk: '–ú–∞–Ω–≥–æ –ª–∏–º–æ–Ω–∞–¥', price: 950, weight: '400 –º–ª' },
      { name: '–ú–∞—Ä–∞–∫—É–π—è –ª–∏–º–æ–Ω–∞–¥', name_en: 'Passion Fruit Lemonade', name_kk: '–ú–∞—Ä–∞–∫—É–π—è –ª–∏–º–æ–Ω–∞–¥', price: 950, weight: '400 –º–ª' },
    ];

    for (const drink of lemonades) {
      await pool.query(
        `INSERT INTO dishes (category_id, name, description_ru, description_en, description_kk, price, weight, is_available) 
         VALUES ($1, $2, $3, $4, $5, $6, $7, $8)`,
        [
          lemonadesId,
          drink.name,
          `–î–æ–º–∞—à–Ω–∏–π ${drink.name.toLowerCase()} –∏–∑ —Å–≤–µ–∂–∏—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤`,
          `Homemade ${drink.name_en.toLowerCase()} with fresh ingredients`,
          `–ñ–∞“£–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—Ç–µ—Ä–¥–µ–Ω –∂–∞—Å–∞–ª“ì–∞–Ω ${drink.name_kk.toLowerCase()}`,
          drink.price,
          drink.weight,
          true
        ]
      );
    }
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${lemonades.length} –ª–∏–º–æ–Ω–∞–¥–æ–≤`);

    // –ß–∞–∏
    const teas = [
      { name: '–ß–µ—Ä–Ω—ã–π —á–∞–π', name_en: 'Black Tea', name_kk: '“ö–∞—Ä–∞ —à–∞–π', price: 400, weight: '300 –º–ª' },
      { name: '–ó–µ–ª–µ–Ω—ã–π —á–∞–π', name_en: 'Green Tea', name_kk: '–ñ–∞—Å—ã–ª —à–∞–π', price: 400, weight: '300 –º–ª' },
      { name: '–ß–∞–π —Å –ª–∏–º–æ–Ω–æ–º', name_en: 'Tea with Lemon', name_kk: '–õ–∏–º–æ–Ω–¥—ã —à–∞–π', price: 450, weight: '300 –º–ª' },
      { name: '–ß–∞–π —Å –º—è—Ç–æ–π', name_en: 'Mint Tea', name_kk: '–ñ–∞–ª–±—ã–∑–¥—ã —à–∞–π', price: 450, weight: '300 –º–ª' },
      { name: '–ò–º–±–∏—Ä–Ω—ã–π —á–∞–π', name_en: 'Ginger Tea', name_kk: '–ò—ñ—Ä–ª—ñ —à–∞–π', price: 500, weight: '300 –º–ª' },
      { name: '–§—Ä—É–∫—Ç–æ–≤—ã–π —á–∞–π', name_en: 'Fruit Tea', name_kk: '–ñ–µ–º—ñ—Å—Ç—ñ —à–∞–π', price: 550, weight: '300 –º–ª' },
    ];

    for (const drink of teas) {
      await pool.query(
        `INSERT INTO dishes (category_id, name, description_ru, description_en, description_kk, price, weight, is_available) 
         VALUES ($1, $2, $3, $4, $5, $6, $7, $8)`,
        [
          teasId,
          drink.name,
          `–ê—Ä–æ–º–∞—Ç–Ω—ã–π ${drink.name.toLowerCase()}`,
          `Aromatic ${drink.name_en.toLowerCase()}`,
          `–•–æ—à –∏—ñ—Å—Ç—ñ ${drink.name_kk.toLowerCase()}`,
          drink.price,
          drink.weight,
          true
        ]
      );
    }
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${teas.length} –≤–∏–¥–æ–≤ —á–∞—è`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
    console.log('\nüìä –ò—Ç–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ:');
    console.log(`  - –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: 3`);
    console.log(`  - –ù–∞–ø–∏—Ç–∫–æ–≤: ${coolDrinks.length + lemonades.length + teas.length}`);
    
    console.log('\n‚úÖ –ù–∞–ø–∏—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');
    console.log('\nüí° –¢–µ–ø–µ—Ä—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ /bar –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤—Å–µ –Ω–∞–ø–∏—Ç–∫–∏');
    console.log('   http://localhost:5173/bar');
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–∏—Ç–∫–æ–≤:', error);
    process.exit(1);
  }
}

addBarDrinks();
