import pool from '../config/database.js';

async function updateCategories() {
  try {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');

    // –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const newCategories = [
      { name_ru: '–ó–∞–≤—Ç—Ä–∞–∫–∏', name_en: 'Breakfast', name_kk: '–¢–∞“£“ì—ã –∞—Å', order: 1 },
      { name_ru: '–°—É–ø—ã', name_en: 'Soups', name_kk: '–°–æ—Ä–ø–∞–ª–∞—Ä', order: 2 },
      { name_ru: '–°–∞–ª–∞—Ç—ã', name_en: 'Salads', name_kk: '–°–∞–ª–∞—Ç—Ç–∞—Ä', order: 3 },
      { name_ru: '–í–æ–∫ –∏ –≤–æ—Å—Ç–æ—á–Ω—ã–µ –±–ª—é–¥–∞', name_en: 'Wok and Asian dishes', name_kk: '–í–æ–∫ –∂”ô–Ω–µ —à—ã“ì—ã—Å —Ç–∞“ì–∞–º–¥–∞—Ä—ã', order: 4 },
      { name_ru: '–ì–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞', name_en: 'Hot dishes', name_kk: '–´—Å—Ç—ã“õ —Ç–∞“ì–∞–º–¥–∞—Ä', order: 5 },
      { name_ru: '–°—Ç–µ–π–∫–∏', name_en: 'Steaks', name_kk: '–°—Ç–µ–π–∫—Ç–µ—Ä', order: 6 },
      { name_ru: '–ì–∞—Ä–Ω–∏—Ä—ã', name_en: 'Side dishes', name_kk: '–ì–∞—Ä–Ω–∏—Ä–ª–µ—Ä', order: 7 },
      { name_ru: '–í—ã–ø–µ—á–∫–∞', name_en: 'Bakery', name_kk: '–ù–∞–Ω-—Ç–æ“õ–∞—à', order: 8 },
      { name_ru: '–ú–∞–Ω—Ç—ã', name_en: 'Manti', name_kk: '–ú”ô–Ω—Ç—ñ', order: 9 },
      { name_ru: '–ü–∞—Å—Ç—ã', name_en: 'Pasta', name_kk: '–ü–∞—Å—Ç–∞', order: 10 },
      { name_ru: '–ë–ª—é–¥–∞ –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—é', name_en: 'Dishes for company', name_kk: '–ö–æ–º–ø–∞–Ω–∏—è“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω —Ç–∞“ì–∞–º–¥–∞—Ä', order: 11 },
      { name_ru: '–î–µ—Å–µ—Ä—Ç—ã', name_en: 'Desserts', name_kk: '–î–µ—Å–µ—Ä—Ç—Ç–µ—Ä', order: 12 }
    ];

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const currentCategories = await pool.query(
      'SELECT id, name_ru, name_en, name_kk, display_order FROM categories ORDER BY display_order'
    );
    
    console.log('\nüìã –¢–µ–∫—É—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:');
    currentCategories.rows.forEach(cat => {
      console.log(`  ${cat.display_order}. ${cat.name_ru} (${cat.name_en} / ${cat.name_kk}) - ID: ${cat.id}`);
    });

    // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫—É—Ö–Ω–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ë–∞—Ä, –ü–∏—Ü—Ü—É –∏ –Ω–∞–ø–∏—Ç–∫–∏)
    console.log('\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫—É—Ö–Ω–∏...');
    await pool.query(`DELETE FROM categories WHERE name_ru NOT IN ('–ë–∞—Ä', '–ü–∏—Ü—Ü–∞', '–ü—Ä–æ—Ö–ª–∞–¥–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏', '–õ–∏–º–æ–Ω–∞–¥—ã', '–ß–∞–∏')`);
    console.log('‚úÖ –°—Ç–∞—Ä—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫—É—Ö–Ω–∏ —É–¥–∞–ª–µ–Ω—ã (–ë–∞—Ä –∏ –Ω–∞–ø–∏—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)');

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    console.log('\n‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
    for (const cat of newCategories) {
      await pool.query(
        `INSERT INTO categories (name_ru, name_en, name_kk, display_order) 
         VALUES ($1, $2, $3, $4)`,
        [cat.name_ru, cat.name_en, cat.name_kk, cat.order]
      );
      console.log(`  ‚úÖ ${cat.order}. ${cat.name_ru}`);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ë–∞—Ä–∞ (—á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ –ø–æ—Å–ª–µ –∫—É—Ö–Ω–∏)
    console.log('\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ë–∞—Ä–∞...');
    await pool.query(`UPDATE categories SET display_order = 13 WHERE name_ru = '–ë–∞—Ä'`);
    await pool.query(`UPDATE categories SET display_order = 14 WHERE name_ru = '–ü–∏—Ü—Ü–∞'`);
    await pool.query(`UPDATE categories SET display_order = 15 WHERE name_ru = '–ü—Ä–æ—Ö–ª–∞–¥–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏'`);
    await pool.query(`UPDATE categories SET display_order = 16 WHERE name_ru = '–õ–∏–º–æ–Ω–∞–¥—ã'`);
    await pool.query(`UPDATE categories SET display_order = 17 WHERE name_ru = '–ß–∞–∏'`);
    console.log('‚úÖ –ü–æ—Ä—è–¥–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const updatedCategories = await pool.query(
      'SELECT id, name_ru, name_en, name_kk, display_order FROM categories ORDER BY display_order'
    );
    
    console.log('\nüìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:');
    updatedCategories.rows.forEach(cat => {
      console.log(`  ${cat.display_order}. ${cat.name_ru} (${cat.name_en} / ${cat.name_kk}) - ID: ${cat.id}`);
    });

    console.log('\n‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫—É—Ö–Ω–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
    console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ë–∞—Ä–∞ –∏ –Ω–∞–ø–∏—Ç–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
    console.log('\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ë–ª—é–¥–∞ –∏–∑ —Å—Ç–∞—Ä—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫—É—Ö–Ω–∏ —Ç–µ–ø–µ—Ä—å –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π!');
    console.log('üí° –ó–∞–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∏ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –±–ª—é–¥–∞–º –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:');
    console.log('   http://localhost:5173/admin/dashboard');
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
    process.exit(1);
  }
}

updateCategories();
